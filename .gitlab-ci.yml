stages:
  - test_and_build
  - helm_push
  - clustersync

variables:
  HELM_ALL_image_tag: ${CI_COMMIT_SHA}
  DEPLOY_CHART: kci-db-operator

# golint will be enabled strictly later
golint:
  stage: test_and_build
  image: golang:1.13-alpine3.10
  script:
    - go get -u golang.org/x/lint/golint
    - find . -type f -name "*\.go" | grep -v "zz_generated" | while read line; do
        golint -set_exit_status $line || exit 1;
      done

govet:
  stage: test_and_build
  image: golang:1.13-alpine3.10
  script:
    - apk add --update --no-cache build-base
    - go vet ./...

unit_test:
  stage: test_and_build
  image: golang:1.13-alpine3.10
  variables: 
    GOPATH: /home/go
    POSTGRES_HOST: postgres
    POSTGRES_PORT: "5432"
    POSTGRES_PASSWORD: test1234
    MYSQL_HOST: mysql
    MYSQL_PORT: "3306"
    MYSQL_ROOT_PASSWORD: test1234
  services:
    - name: postgres:9.6-alpine
      alias: postgres
    - name: mysql:5.7
      alias: mysql
  script:
    - apk add --update --no-cache git curl make bash build-base
    - go test -tags tests ./... -v -cover

build:
  stage: test_and_build
  image: ${CI_REGISTRY}/build_images/build_image:latest
  script:
    - build_image -f Dockerfile
  except: 
    - master

build_master:
  stage: test_and_build
  image: ${CI_REGISTRY}/build_images/build_image:latest
  script:
    - build_image -t latest -f Dockerfile
  only: 
    - master

push_operator_helmchart:
  image: ${CI_REGISTRY}/devops/helm-chart-conservator:latest
  stage: helm_push
  variables:
    HELM_CHART: kci-db-operator
  script:
    - lint.sh
    - push.sh

push_dbinstance_helmchart:
  image: ${CI_REGISTRY}/devops/helm-chart-conservator:latest
  stage: helm_push
  variables:
    HELM_CHART: kci-db-instances
  script:
    - lint.sh  
    - push.sh

trigger_cluster_sync:
  stage: clustersync
  script:
  - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=$CI_COMMIT_REF_NAME https://git.kci.rocks/api/v4/projects/333/trigger/pipeline